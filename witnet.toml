# You can read more about all the configuration params in
# https://docs.witnet.io/configuration/toml-file/
[connections]
# Server address tells what local interface and port the Witnet node server should bind to.
# This will probably look like `0.0.0.0:21337` or `192.168.x.x:21337`, but it totally depends on your local network.
server_addr = "0.0.0.0:21337"
# Public address needs to match your *public* IP and port, assuming your router is configured to forward incoming
# connections to the local IP of the device the node is running. Failure to configure this setting will result in your
# node not receiving inbound connections (see: https://docs.witnet.io/try/run-a-node/#open-your-ports).
public_addr = "0.0.0.0:21337"
# List of bootstrap peer addresses. The first time that a node runs, it connects to some of these addresses and query
# them for a list of all the addresses they know. From that moment on, the addresses listed here are not given any
# preference over addresses that have been discovered in any way.
known_peers = [
    "31.220.59.115:21337",
    "34.90.65.210:21337",
    "37.222.206.228:21337",
    "45.32.149.130:21337",
    "50.116.39.37:21337",
    "51.15.218.69:21337",
    "52.55.10.29:21337",
    "62.171.138.37:21337",
    "64.225.97.11:21337",
    "69.181.156.54:21337",
    "78.47.43.137:21337",
    "80.211.68.112:21337",
    "84.201.137.27:21337",
    "85.155.125.104:21337",
    "88.198.200.121:21337",
    "89.40.122.113:21337",
    "93.189.42.63:21337",
    "94.177.225.12:21337",
    "95.111.235.58:21337",
    "102.182.84.122:21337",
    "104.248.50.92:21337",
    "108.61.178.77:21337",
    "109.251.8.131:21337",
    "116.203.43.125:21337",
    "134.122.66.174:21337",
    "135.181.24.217:21337",
    "136.243.8.205:21337",
    "137.220.54.68:21337",
    "138.68.246.229:21337",
    "139.162.32.114:21337",
    "141.164.54.30:21337",
    "142.93.50.140:21337",
    "144.76.172.165:21337",
    "149.28.32.87:21337",
    "155.138.159.104:21337",
    "157.230.114.244:21337",
    "159.65.15.162:21337",
    "161.35.50.209:21337",
    "162.213.255.167:21337",
    "163.172.100.124:21337",
    "165.22.24.100:21337",
    "167.71.93.63:21337",
    "172.86.75.250:21337",
    "173.212.199.96:21337",
    "178.62.85.63:21337",
    "185.163.125.62:21337",
    "188.127.185.126:21337",
    "192.248.156.225:21337",
    "193.109.78.246:21337",
    "194.182.72.60:21337",
    "195.181.208.239:21337",
    "198.211.97.170:21337",
    "199.247.0.149:21337",
    "206.81.7.170:21337",
    "207.61.234.35:21337",
    "209.126.8.47:21337",
    "212.237.27.123:21337",
    "213.37.76.35:21337",
    "217.61.18.38:21337",
]
# How many peer connections to stablish before considering that is safe to decide what the best chain tip is, based on
# the beacons that those peers are announcing.
outbound_limit = 8
# Period for opening new peer connections while the current number of peers is lower than `outbound_limit`.
bootstrap_peers_period_seconds = 1

[storage]
# Path of the folder where RocksDB storage files will be written to.
db_path = ".witnet/storage"

[jsonrpc]
# Enables or disables the JSON-RPC server. This is needed for using the CLI methods of the node.
enabled = true
# The address (IP and port) which the JSON-RPC server binds to.
# WARNING: this should be kept to a local, private address (e.g. 127.0.0.1) to prevent any device in your local network
# (and potentially, the internet) from messing with your JSON-RPC server.
server_address = "127.0.0.1:21338"

# Consensus constants are the Witnet protocol's most critical parameters. Changing any of these would cause your node to
# fork out almost immediately.
# Nodes that announce incompatible consensus constants cannot peer with each other so as to prevent accidental replay
# attacks in the event of a severe network fork.
[consensus_constants]
# Period for block proposing and consolidation.
checkpoints_period = 45
# Earliest date in which nodes can start proposing and consolidating blocks into the chain.
# Tuesday, 18-Jun-2020, 14:00 UTC
checkpoint_zero_timestamp = 1592557200
# Bytes that will be used by the genesis block as a placeholder for the "previous block hash".
bootstrap_hash = "00000000000000000000000000000000000000007769746e65742d302e392e30"
# Hash of the genesis block, as reconstructed from the allocations in the file located at `genesis_path`.
genesis_hash = "649d8f7b3316bd33482ddbc6b1a8d89a3c81e1d9eebdb0247c907df7d20c26f9"
# Period for considering that a node is "active" with regards to reputation. Any node that minted a block OR solved a
# data request in the last number of epochs is considered active. Otherwise, it is considered not active.
activity_period = 1000
# Minimum age of an unspent transaction output (UTXOs) to be acceptable as collateral in a commitment transaction when
# resolving a data request. This age is measured in blocks: the block chain needs to contain at least this amount of
# blocks between the block in which the UTXO was created and the block in which it is being spent as collateral.
collateral_age = 1000

[ntp]
# Period for checking the local system clock drift against a public NTP server.
update_period_seconds = 8000000

[mining]
# Enable or disable mining and participation in resolving data requests.
enabled = true
# Limit the number of retrievals that the node will perform during a single epoch. Due to the locking, highly
# side-effected nature of performing HTTP GET requests, a limit needs to be enforced on the number of retrievals that
# we are willing to perform by unit of time.
# Raising this limit too high may make the node unresponsive to time-critical events, which could potentially lead to
# desynchronization, forking or slashing.
# This is assumed to be a safe default and it should never cause any node to refrain from participating in data requests
# for which it was eligible.
data_request_max_retrievals_per_epoch = 30
# Limit the number of milliseconds that the node is willing to wait for a data source in from data request to response.
data_request_timeout_milliseconds = 2000
# Path for the `genesis_block.json` file that contains the initial wit allocations that need to be built into the first
# block in the block chain.
genesis_path = ".witnet/config/genesis_block.json"
# `mint_external_address` and `mint_external_percentage` enable splitting the mint reward between the node's
# own address and an "external" address, e.g. a the address of a wallet. `mint_external_percentage` indicates
# the percentage of the block rewards that will be assigned to `mint_external_address` (50% by default)
#mint_external_address = "twit1jqgf4rxjrgas3kdhj3t4cr3mg3n33m8zw0aglr"
#mint_external_percentage = 50

[log]
# Logging level, i.e. from more verbose to quieter: "trace" > "debug" > "info" > "warn" > "error" > "none"
level = "debug"
# Automated bug reporting (helps the community improve the software)
sentry_telemetry = true

[wallet]
# Tell the wallet component whether it is running on a testnet environment.
testnet = true
# The address (IP and port) of a Witnet node's JSON-RPC server. This should normally match `json_rpc.server_address`.
node_url = "127.0.0.1:21338"
