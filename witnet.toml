[connections]
# Server address tells what local interface and port the Witnet node server should bind to.
# This will probably look like `0.0.0.0:21337` or `192.168.x.x:21337`, but it totally depends on your local network.
server_addr = "0.0.0.0:21337"
# Public address needs to match your *public* IP and port, assuming your router is configured to forward incoming
# connections to the local IP of the device the node is running. Failure to configure this setting will result in your
# node not receiving inbound connections (see: https://docs.witnet.io/try/run-a-node/#open-your-ports).
public_addr = "0.0.0.0:21337"
# List of bootstrap peer addresses. The first time that a node runs, it connects to some of these addresses and query
# them for a list of all the addresses they know. From that moment on, the addresses listed here are not given any
# preference over addresses that have been discovered in any way.
known_peers = [
        "5.189.172.149:24337",
        "46.4.104.114:22339",
        "49.12.2.247:21337",
        "64.227.69.233:22339",
        "64.227.74.14:22339",
        "68.183.202.131:22339",
        "78.46.86.104:22342",
        "78.47.209.194:22339",
        "81.30.157.7:22339",
        "81.30.157.7:22345",
        "81.30.157.7:22346",
        "81.30.157.7:22348",
        "81.30.157.7:22350",
        "81.30.157.7:22351",
        "81.30.157.7:22352",
        "81.30.157.7:22353",
        "85.114.132.66:22339",
        "85.114.132.66:22348",
        "85.114.132.66:22351",
        "85.114.132.66:22352",
        "94.130.165.149:22339",
        "94.130.30.59:22339",
        "95.217.181.71:21337",
        "104.248.166.16:22339",
        "116.202.116.196:22339",
        "116.202.131.166:22339",
        "116.202.131.24:22339",
        "116.202.131.25:22339",
        "116.202.131.30:22339",
        "116.202.131.31:22339",
        "116.202.131.32:22339",
        "116.202.164.176:22339",
        "116.202.35.247:22339",
        "134.122.116.156:22339",
        "134.209.84.237:22339",
        "135.181.0.31:22339",
        "135.181.194.161:21337",
        "135.181.60.149:22345",
        "136.243.135.114:22339",
        "136.243.93.142:22352",
        "136.243.94.171:22346",
        "136.243.95.38:22342",
        "136.243.95.38:22348",
        "138.68.108.254:22339",
        "142.93.42.49:22339",
        "144.76.18.98:21337",
        "144.91.113.168:21337",
        "148.251.128.18:22348",
        "148.251.128.19:22342",
        "148.251.128.26:22341",
        "157.245.171.146:21337",
        "159.69.139.239:22339",
        "159.69.56.28:22339",
        "159.69.72.123:22339",
        "159.69.74.96:22339",
        "159.89.5.213:22339",
        "159.89.7.193:22339",
        "161.35.167.68:22339",
        "161.35.235.109:22339",
        "163.172.131.197:21337",
        "165.232.106.11:22339",
        "165.232.108.246:22339",
        "165.232.32.106:22339",
        "167.172.29.131:22339",
        "167.172.39.205:22339",
        "167.71.2.204:22339",
        "167.71.5.253:22339",
        "167.99.154.252:22339",
        "167.99.200.189:22339",
        "167.99.243.125:22339",
        "167.99.246.148:22339",
        "167.99.248.158:22339",
        "167.99.249.236:22339",
        "173.212.241.42:21337",
        "173.249.40.145:25337",
        "176.9.29.25:22342",
        "178.62.221.245:22339",
        "188.166.109.122:22339",
        "188.166.59.159:22339",
        "188.166.71.96:22339",
        "188.40.103.83:21537",
        "188.40.103.83:21637",
        "188.40.103.83:22437",
        "188.40.103.83:22737",
        "188.40.131.24:22339",
        "188.40.94.105:22339",
        "192.241.148.38:22339",
        "195.201.167.113:22339",
        "195.201.173.77:22339",
        "195.201.181.221:22339",
        "195.201.181.245:22339",
        "195.201.240.189:22339",
        "206.189.63.220:22339",
        "207.154.214.111:22339",
        "207.154.238.90:22339",
        "207.154.253.202:22339",
        "207.154.254.153:22339",
        "213.239.234.132:22348",
]
# How many peer connections to stablish before considering that is safe to decide what the best chain tip is, based on
# the beacons that those peers are announcing.
outbound_limit = 8
# Period for opening new peer connections while the current number of peers is lower than `outbound_limit`.
bootstrap_peers_period_seconds = 1
# Reject (tarpit) inbound connections coming from addresses in the same /8 IP range, so as to prevent sybil peers from
# monopolizing our inbound capacity (128 by default).
reject_sybil_inbounds = true

[storage]
# Path of the folder where RocksDB storage files will be written to.
db_path = ".witnet/storage"

[jsonrpc]
# Enables or disables the JSON-RPC server. This is needed for using the CLI methods of the node.
enabled = true
# The address (IP and port) which the JSON-RPC server binds to.
# WARNING: this should be kept to a local, private address (e.g. 127.0.0.1) to prevent any device in your local network
# (and potentially, the internet) from messing with your JSON-RPC server.
server_address = "127.0.0.1:21338"

[ntp]
# Period for checking the local system clock drift against a public NTP server.
update_period_seconds = 1024

[mining]
# Enable or disable mining and participation in resolving data requests.
enabled = true
# Limit the number of retrievals that the node will perform during a single epoch. Due to the locking, highly
# side-effected nature of performing HTTP GET requests, a limit needs to be enforced on the number of retrievals that
# we are willing to perform by unit of time.
# Raising this limit too high may make the node unresponsive to time-critical events, which could potentially lead to
# desynchronization, forking or slashing.
# This is assumed to be a safe default and it should never cause any node to refrain from participating in data requests
# for which it was eligible.
data_request_max_retrievals_per_epoch = 30
# Limit the number of milliseconds that the node is willing to wait for a data source in from data request to response.
data_request_timeout_milliseconds = 2000
# Path for the `genesis_block.json` file that contains the initial wit allocations that need to be built into the first
# block in the block chain.
genesis_path = ".witnet/config/genesis_block.json"
# `mint_external_address` and `mint_external_percentage` enable splitting the mint reward between the node's
# own address and an "external" address, e.g. a the address of a wallet. `mint_external_percentage` indicates
# the percentage of the block rewards that will be assigned to `mint_external_address` (50% by default)
#mint_external_address = "twit1jqgf4rxjrgas3kdhj3t4cr3mg3n33m8zw0aglr"
#mint_external_percentage = 50
# Set a minimum fee you require before your node includes a value transfer transaction into a block
minimum_vtt_fee_nanowits = 1

[log]
# Logging level, i.e. from more verbose to quieter: "trace" > "debug" > "info" > "warn" > "error" > "none"
level = "info"

[wallet]
# The address (IP and port) of a Witnet node's JSON-RPC server. This should normally match `json_rpc.server_address`.
# If more than one address is provided, the wallet will choose one at random.
node_url = "127.0.0.1:21338"
